\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{sty/equations}[Beatify multiple equations with comments and alignment.]

\RequirePackage{amsmath}        % provide basic math components
\RequirePackage{amssymb}        % provide QED square symbol
\RequirePackage{IEEEtrantools}  % provide {IEEEeqnarray} to align equations and their comments
\RequirePackage{array}          % provide {array} to draw a vertical line next to the comments
\RequirePackage{etoolbox}       % add methods to an environment
\RequirePackage{xifthen}        % detect empty arguments


\makeatletter % Grant access to private commands (Name contains an @).


%%%%%%%%%%%%%%%%%%%% PACKAGE: DEFINE GLOBAL COMMAND %%%%%%%%%%%%%%%%%%%%

\def\gnewcommand{\g@star@or@long\gnew@command}
\def\grenewcommand{\g@star@or@long\grenew@command}
\def\g@star@or@long#1{% 
  \@ifstar{\let\l@ngrel@x\global#1}{\def\l@ngrel@x{\long\global}#1}}
\def\gnew@command#1{\@testopt{\@gnewcommand#1}0}
\def\@gnewcommand#1[#2]{%
  \kernel@ifnextchar [{\@gxargdef#1[#2]}%
                {\@argdef#1[#2]}}  
\let\@gxargdef\@xargdef
\patchcmd{\@gxargdef}{\def}{\gdef}{}{}
\let\grenew@command\renew@command
\patchcmd{\grenew@command}{\new@command}{\gnew@command}{}{}


%%%%%%%%%%%%%%%%%%%% PUBLIC FUNCTIONS: %%%%%%%%%%%%%%%%%%%%

% Define environment \begin{equations} or \begin{equations}[columns]
% - beatify multiple centered equations with comments, alignment and numbers
% - allows only aligning one equation sign
% @param * enable citation numbers by default
% @param #1 columns and their types used to display all equations
\newenvironment{equations}[1][\@columnsalignoneequalsign]
{
    \begin{IEEEeqnarray*}{#1l} % l for description column
}
{
    \end{IEEEeqnarray*}
}
\newenvironment{equations*}[1][\@columnsalignoneequalsign]
{
    \begin{IEEEeqnarray}{#1l} % l for description column
}
{
    \end{IEEEeqnarray}
}


% Setter for \@commentwidth
\newcommand{\setcommentwidth}[1]
{
    \ifthenelse{\isempty{#1}} % parameter omitted?
    {
        \renewcommand{\@commentwidth}{0.33\columnwidth} % default value
    }
    {
        \renewcommand{\@commentwidth}{#1} % override value
    }
}


%%%%%%%%%%%%%%%%%%%% PUBLIC METHODS: %%%%%%%%%%%%%%%%%%%%
% - only accessible inside the environment equations

% Define method \intertext{text}
% - write a regular paragraph across the entire columnwidth between two equations
% - call it after the \\ of the last equation without any further commands
% - don't put a \\ in front of the next equation
% - only accessible inside the environment (aka method)
% @param #1 Regular text to display (no math mode)
\patchcmd{\@IEEEeqnarray}{\relax}{\relax\intertext@}{}{}

\AtBeginEnvironment{equations}
{
    % Fix empty desciption in first line
    \@resetcomment
%
    % Define method \comment{text}
    % - write a regular paragraph into the description column
    % - seperate the comment with a vertical line and some horizontal space
    % - comments have a fixed width
    % - call it as the last command in a row and after two &
    % @param  #1    Regular text to display (no math mode)
    \renewcommand{\@setcomment}[1]
    {
        \@resetcomment
        \gnewcommand{\@description}
        {%
            &\quad%
            \begin{array}{|p{\@commentwidth}}%
                #1%
            \end{array}%
        }
    }
    \global\let\comment\@setcomment % Make the method public inside the environment.
%
%
    % Define method \unit{text}
    % - write a unit into the description column
    % - seperate the unit with horizontal space
    % @param  #1    Units to display non-italics (yes math mode)
    \renewcommand{\@setunit}[1]
    {
        \@resetunit
        \gnewcommand{\@description}
        {%
            &\quad%
            \left[%
                \mathrm{#1}%
            \right]%
        }
    }
    \global\let\unit\@setunit % Make the method public inside the environment.
%
%
    % Define method \qed
    % - draw a square (meaning quod erum demonstrandum) at the end of the row
    % - call it after the \\ of the last equation
    % - don't call other command in the same row
    \renewcommand{\@qed}
    {
        \intertext{\raggedleft $\Box$}
    }
    \global\let\qed\@qed % Make the method public inside the environment.
%
%
    % Modify method \label{name}
    % - attach a node for cross-referencing e.g. \eqnref{eqn:EXAMPLE}
    % - automatically show citation number e.g. (3)
    % @param #1 new node for cross-referencing e.g. \label{eqn:EXAMPLE}
    \apptocmd{\label}{\yesnumber}{}{} % add citation
    %
    % Define method \sublabel{name}
    % - attach a node for cross-referencing
    % - automatically show citation number with letter e.g. (3a)
    \global\let\sublabel\label % Alias method \sublabel
    \pretocmd{\sublabel}{\yessubnumber}{}{} % add citation
%
%
    % Define method \eqnref{name}
    % - reference another equation
    \renewcommand{\@eqnref}[1]
    {%
        (\ref{#1})%
    }
    \global\let\eqnref\@eqnref % Make the method public inside the environment.
%
%
    % Alias method \yessubnumber
    \global\let\yessubnumber\IEEEyessubnumber
%
%
    % Paste the description column
    \pretocmd{\@IEEEeqnarraycr}{\@pasteDescription}
}

% Fix no description because of missing \\ in last equation
\AtEndEnvironment{equations}{\@pasteDescription}


%%%%%%%%%%%%%%%%%%%% DECLARE INTERFACE FUNCTIONS: %%%%%%%%%%%%%%%%%%%%

\newcommand{\@setcomment}{}
\newcommand{\@setunit}{}
\newcommand{\@qed}{}
\newcommand{\@eqnref}{}


%%%%%%%%%%%%%%%%%%%% DECLARE PRIVATE FUNCTIONS: %%%%%%%%%%%%%%%%%%%%

\newcommand{\@resetcomment}{\global\let\@description\relax} % \@description
\newcommand{\@resetunit}{\global\let\@description\relax} % undefine \@description
\newcommand{\@pasteDescription}
{%
    \@ifundefined{@description}{}%
    {%
        \@description% Insert description
        \@resetcomment% Reset description for next line
    }
}

%%%%%%%%%%%%%%%%%%%% DECLARE PRIVATE VARIABLES: %%%%%%%%%%%%%%%%%%%%

\newcommand{\@description}{}
\newcommand{\@columnsalignoneequalsign}{rCl}
\newcommand{\@commentwidth}{}
\setcommentwidth{} % apply default value


\makeatother % Revoke access to private commands (Name contains an @).